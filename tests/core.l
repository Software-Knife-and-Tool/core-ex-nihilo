(constantp ''a)
(constantp '(1 2 3))
(constantp 'a)
(constantp 1)
(constantp :nil)
(functionp acons)
(functionp assq)
(functionp eql)
(functionp fmt)
(functionp pairlis)
(functionp room)
(functionp sequencep)
(functionp string=)
(functionp string)
(parse-lambda ())
(parse-lambda '(a b c))
(parse-lambda '(a b c :option d e))
(parse-lambda '(a b c :option d (e 1)))
(parse-lambda '(a b c :option e f :rest rest))
(parse-lambda '(a b c :option e (f 5) :rest rest))
(parse-lambda '(:option a b))
(parse-lambda '(:option a (b 1)))
(parse-lambda '(:option a b :rest rest))
(parse-lambda '(:option a (b 1) :rest rest))
(parse-lambda '(:rest a))
(mu:mapc (:lambda (a b) (princ (cons a b) :nil :nil)) '(1 2 3) '(a b c))
(mu:mapcar car '((1 a) (2 b) (3 c)))
(mu:mapl (:lambda (el) (princ el :nil :nil)) '((1 2 3 4) (1 2) (1 2 3)))
(mu:maplist append '(1 2 3 4) '(1 2) '(1 2 3))
(defstruct test (a 0 :fixnum) (b 1 :fixnum))
(string= "123" "123")
(string= "123" "abc")
(null (macro-function 'check-type))
(null (macro-function 'defstruct))
(null (macro-function 'letrec))
(null (macro-function 'time))
(null (macro-function 'typecase))
(null (macro-function 'with-ns))
(while :nil :t)
