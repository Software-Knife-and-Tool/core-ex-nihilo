(reverse '(1 2 3))
(reverse #(:char #\a #\b #\c))
(atom '(1 2 3))
(mu.apply (let ((a 1)) (closure (:lambda (b) (fixnum+ a b)))) '(2))
(prin1-to-string "one")
(princ-to-string "one")
(progn (:defcon g-macro (:macro () (let ((result (gensym))) (list 'let (list (list result 1)) result)))) (g-macro))
(when :t :t)
(unless :t :nil)
(cond (:t 1))
(zerop 0)
(bool (macro-function 'dolist))
(bool (macro-function 'dotimes))
(functionp 1+)
(functionp 1-)
(functionp atom)
(functionp break)
(functionp concatenate)
(functionp copy-list)
(functionp count-if)
(functionp describe)
(functionp elt)
(functionp error)
(functionp find-if)
(functionp find-if*)
(functionp length)
(functionp mapc)
(functionp mapcar)
(functionp mapl)
(functionp maplist)
(functionp pairp)
(functionp pprint)
(functionp prin1)
(functionp prin1-to-string)
(functionp princ)
(functionp princ-to-string)
(functionp print)
(functionp read-from-string)
(functionp read-from-string-stream)
(functionp reverse)
(functionp typep)
(functionp with-ns-symbols)
(functionp with-open-stream)
(functionp zip-1)
(functionp zip-2)
(functionp reduce)
(reduce fixnum* '(1 2 3 4 5) 1)
(read-from-string "(1 2 3)")
(read-from-string "1.024e5")
(typep 1 :fixnum)
(typep 1 :float)
(typep 1 :t)
(vector :fixnum (fixnum+ 1 2) 3 (fixnum- 4 1))
(zerop 1)
