#(:char),
#(:fixnum),#(:fixnum)
#(:float),#(:float)
#(:t),#(:t)
((:lambda ())),:nil
(.apply fixnum+ '(1 2)),3
(:defsym list1 (:lambda (:rest lists) lists)),list1
(:defsym list1 (:lambda (:rest lists) lists)),list1
(boundp 'foo),:nil
(boundp :nil),:t
(car '(1 2 3)),1
(car :nil),:nil
(cdr '(1 2 3)),(2 3)
(cdr :nil),:nil
(charp #\\a),a
(charp 1),:nil
(cons 1 '(2)),(1 2)
(cons 1 2),(1 . 2)
(consp '(1)),(1)
(consp 1),:nil
(cos 60.0),0.500000
(eq #\\p #\\p),p
(null (eq .apply mu.apply)),:nil
(eq :t (symbol-value (intern (find-ns "mu") :extern  "t" :t))),:t
(eq :t :nil),:nil
(eq :t :t),:t
(null (eq apply .apply)),:nil
(eval 1),1
(fixnum* -2 3),-6
(fixnum* 2 3),6
(fixnum+ -1 2),1
(fixnum+ 1 2),3
(fixnum- 1 2),-1
(fixnum- 2 1),1
(fixnum/ 2 3),0
(fixnum/ 3 2),1
(fixnum< 2 3),2
(fixnum< 3 2),:nil
(fixnump 1),1
(fixnump :t),:nil
(float* -0.1 0.2),-0.020000
(float* 0.1 0.2),0.020000
(float+ -3.0 2.0),-1.000000
(float+ 0.1 0.2),0.300000
(float- 0.1 0.2),-0.100000
(float- 3.0 1.0),2.000000
(float/ 0.1 0.2),0.500000
(float/ 2.0 3.0),0.666667
(float< 2.0 3.0),2.000000
(float< 3.0 2.0),:nil
(floatp 1.0),1.000000
(floatp :t),:nil
(null (functionp .apply)),:nil
(null (functionp .block)),:nil
(null (functionp .frame-ref)),:nil
(null (functionp .if)),:nil
(null (functionp .letq)),:nil
(null (functionp .print)),:nil
(null (functionp .return)),:nil
(null (functionp :t)),:t
(null (functionp accept-socket-stream)),:nil
(null (functionp acos)),:nil
(null (functionp apply)),:nil
(null (functionp asin)),:nil
(null (functionp atan)),:nil
(null (functionp boundp)),:nil
(null (functionp car)),:nil
(null (functionp cdr)),:nil
(null (functionp charp)),:nil
(null (functionp close)),:nil
(null (functionp closure)),:nil
(null (functionp connect-socket-stream)),:nil
(null (functionp cons)),:nil
(null (functionp consp)),:nil
(null (functionp cos)),:nil
(null (functionp env-stack)),:nil
(null (functionp env-stack-depth)),:nil
(null (functionp eofp)),:nil
(null (functionp eq)),:nil
(null (functionp eval)),:nil
(null (functionp exception)),:nil
(null (functionp exceptionp)),:nil
(null (functionp exit)),:nil
(null (functionp exp)),:nil
(null (functionp find-in-ns)),:nil
(null (functionp find-ns)),:nil
(null (functionp find-symbol)),:nil
(null (functionp fixnum*)),:nil
(null (functionp fixnum+)),:nil
(null (functionp fixnum+)),:nil
(null (functionp fixnum-)),:nil
(null (functionp fixnum/)),:nil
(null (functionp fixnum<)),:nil
(null (functionp fixnump)),:nil
(null (functionp float*)),:nil
(null (functionp float+)),:nil
(null (functionp float-)),:nil
(null (functionp float/)),:nil
(null (functionp float<)),:nil
(null (functionp floatp)),:nil
(null (functionp functionp)),:nil
(null (functionp gc)),:nil
(null (functionp get-output-string-stream)),:nil
(null (functionp heap-info)),:nil
(null (functionp heap-log)),:nil
(null (functionp in-ns)),:nil
(null (functionp intern)),:nil
(null (functionp invoke)),:nil
(null (functionp keyword)),:nil
(null (functionp keywordp)),:nil
(null (functionp list-length)),:nil
(null (functionp load)),:nil
(null (functionp log)),:nil
(null (functionp log10)),:nil
(null (functionp logand)),:nil
(null (functionp logor)),:nil
(null (functionp macro-function)),:nil
(null (functionp macroexpand)),:nil
(null (functionp make-symbol)),:nil
(null (functionp mapc)),:nil
(null (functionp mapcar)),:nil
(null (functionp mapl)),:nil
(null (functionp maplist)),:nil
(null (functionp mod)),:nil
(null (functionp mu.apply)),:nil
(null (functionp namespacep)),:nil
(null (functionp ns)),:nil
(null (functionp ns-current)),:nil
(null (functionp ns-import)),:nil
(null (functionp ns-name)),:nil
(null (functionp ns-symbols)),:nil
(null (functionp nth)),:nil
(null (functionp nthcdr)),:nil
(null (functionp null)),:nil
(null (functionp open-stream)),:nil
(null (functionp open-input-file)),:nil
(null (functionp open-input-string)),:nil
(null (functionp open-output-file)),:nil
(null (functionp open-output-string)),:nil
(null (functionp open-socket-server)),:nil
(null (functionp open-socket-stream)),:nil
(null (functionp pow)),:nil
(null (functionp raise)),:nil
(null (functionp raise-exception)),:nil
(null (functionp read)),:nil
(null (functionp read-byte)),:nil
(null (functionp read-char)),:nil
(null (functionp runtime)),:nil
(null (functionp set-macro-character)),:nil
(null (functionp sin)),:nil
(null (functionp special-operatorp)),:nil
(null (functionp sqrt)),:nil
(null (functionp stack-inspect)),:nil
(null (functionp stack-trace)),:nil
(null (functionp streamp)),:nil
(null (functionp struct)),:nil
(null (functionp struct-slots)),:nil
(null (functionp struct-type)),:nil
(null (functionp structp)),:nil
(null (functionp symbol-name)),:nil
(null (functionp symbol-ns)),:nil
(null (functionp symbol-value)),:nil
(null (functionp symbolp)),:nil
(null (functionp system)),:nil
(null (functionp system-env)),:nil
(null (functionp systime)),:nil
(null (functionp tan)),:nil
(null (functionp terpri)),:nil
(null (functionp trampoline)),:nil
(null (functionp type-of)),:nil
(null (functionp unread-char)),:nil
(null (functionp vec-length)),:nil
(null (functionp vec-map)),:nil
(null (functionp vec-mapc)),:nil
(null (functionp vec-ref)),:nil
(null (functionp vec-type)),:nil
(null (functionp vectorp)),:nil
(null (functionp view)),:nil
(null (functionp with-exception)),:nil
(null (functionp write-byte)),:nil
(null (functionp write-char)),:nil
(get-output-string-stream (open-output-string "")),
(keywordp 'foo),:nil
(keywordp :keyp),:keyp
(list-length '(1 2 3)),3
(list-length :nil),0
(log 10.0),2.302585
(log10 1000.0),3.000000
(logand 3 1),1
(logor 4 2),6
(macroexpand 123),123
(make-symbol "abc"),abc
(mod -1 1),0
(mod 2 2),0
(mod 2 3),2
(mod 3 2),1
(null (namespacep (find-ns "foo"))),:t
(null (namespacep (find-ns "mu"))),:nil
(null (namespacep (ns "foo" (find-ns "mu")))),:nil
(null (namespacep :t)),:t
(ns-name (find-ns "")),mu
(nth 0 '(1 2 3)),1
(nthcdr 0 '(1 2 3)),(1 2 3)
(null :nil),:t
(null :t),:nil
(pow 7.0 3.0),343.000000
(print 1.0 :nil :t),1.0000001.000000
(print 123 :nil :nil),123123
(print 123 :nil :t),123123
(read (open-input-string "'f")),(:quote f)
(sin 30.0),0.500000
(null (special-operatorp 'foo)),:t
(null (special-operatorp :defsym)),:nil
(sqrt 2.0),1.414214
(null (streamp error-output)),:nil
(null (streamp standard-input)),:nil
(null (streamp standard-output)),:nil
(symbol-name 'foo),foo
(symbol-value :nil),:nil
(symbolp :t),:t
(tan 45.0),1.000000
(trampoline (:lambda () 0)),0
(type-of "foo"),:string
(type-of (car (runtime))),:fixnum
(type-of (car (systime))),:fixnum
(type-of load),:func
(type-of macroexpand),:func
(vec-length "abc"),3
(vec-length #(:t 1 2 3)),3
(vec-map (:lambda (n) (fixnum+ 1 n)) #(:fixnum 1 2 3)),#(:fixnum 2 3 4)
(vec-mapc (:lambda (n) (.print n :nil :nil)) #(:fixnum 1 2 3)),123#(:fixnum 1 2 3)
(vec-ref #(:fixnum 1 2 3) 1),2
(vec-ref #(:float 1.0 2.0 3.0) 1),2.000000
(vec-ref #(:t 'a 2 3.0) 1),2
(vec-type #(:t a b c)),:t
(null (vectorp #(:char #\\a #\\a #\\a))),:nil
(null (vectorp #(:fixnum 1 2 3))),:nil
(null (vectorp #(:float 1.0 2.0 3.0))),:nil
(null (vectorp #(:t 1 'a 3))),:nil
(null (vectorp :nil)),:t
(write-char #\\a standard-output),aa
:nil,:nil
:t,:t